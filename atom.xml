<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarLu&#39;s Personal Blog Page</title>
  
  <subtitle>这里是副标题</subtitle>
  <link href="https://starlooo.github.io/atom.xml" rel="self"/>
  
  <link href="https://starlooo.github.io/"/>
  <updated>2021-07-06T14:38:25.160Z</updated>
  <id>https://starlooo.github.io/</id>
  
  <author>
    <name>StarLu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件构造课程随笔--IDEA是如何帮你重写equals()方法的？</title>
    <link href="https://starlooo.github.io/2021/06/19/equals/"/>
    <id>https://starlooo.github.io/2021/06/19/equals/</id>
    <published>2021-06-18T16:00:00.000Z</published>
    <updated>2021-07-06T14:38:25.160Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;IDEA是如何帮你重写equals-方法的？&quot;&gt;&lt;a href=&quot;#IDEA是如何帮你重写equals-方法的？&quot; class=&quot;headerlink&quot; title=&quot;IDEA是如何帮你重写equals()方法的？&quot;&gt;&lt;/a&gt;&lt;center&gt;IDEA是如何帮你重写equals()方法的？&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;一-写在前面&quot;&gt;&lt;a href=&quot;#一-写在前面&quot; class=&quot;headerlink&quot; title=&quot;一. 写在前面&quot;&gt;&lt;/a&gt;一. 写在前面&lt;/h2&gt;&lt;div style=&quot;font-size: 0&quot;&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&amp;emsp;&amp;emsp;在本软件构造课程的第8讲中，我们学习了如何判断两个对象的等价性，了解了什么是引用等价性(在Java中使用==符号判断)以及什么是&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
行为等价性(在Java中使用equals()方法来判断)。以及对于immutable的对象，我们应当重写其继承自Object类的equals()方法和hashCode()方法，
并且在其中实现观察等价性或者行为等价性(对immutable对象来说观察等价性就是行为等价性)；而对于mutable对象来说，最好是不对其&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
继承自Object类的equals()方法和hashCode()方法进行重写，就让它用默认的==来实现行为等价性。&lt;br&gt;
&amp;emsp;&amp;emsp;在平时写Java代码的时候，相信大多数同学跟我一样，因为不论使用的IDE是IDEA还是Eclipse，都提供了自动重写equals()和hashCode()方法&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
的快捷键，所以大家平时应该都不是自己手动重写equals()和hashCode()方法而是依靠IDE帮我们自动生成。这当然是不错的，毕竟&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
现代IDE的一大工作就是尽可能减少程序员的工作量。不过，在开心的使用IDE的代码自动生成功能之前，我们还是需要仔细了解其原理，不然不管是&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
期末考试还是以后面试，需要我们手写代码的时候，就露陷了。&lt;br&gt;
&amp;emsp;&amp;emsp;因此，&lt;mark&gt;本篇博客旨在向大家介绍IDE(以IDEA为例，Eclipse同理)是怎么帮我们重写equals()方法的&lt;/mark&gt;。特别是考虑到&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
调查身边同学，问他们是否了解IDE是如何自动生成equals()方法的时候，大家都不是很了解，就更加坚定了我要写一篇这样的博客的决心。希望能对大家有所帮助。&lt;br&gt;
&amp;emsp;&amp;emsp;在进入正文之前，&lt;mark&gt;首先给出本文中用来进行测试的三个类的代码，他们分别是父类SuperClass、子类SubClassA和SubClassB&lt;/mark&gt;，代码分别如下：
&lt;/span&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="我的笔记" scheme="https://starlooo.github.io/categories/%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://starlooo.github.io/tags/Java/"/>
    
    <category term="软件构造" scheme="https://starlooo.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0/"/>
    
    <category term="随笔" scheme="https://starlooo.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>软件构造课程随笔--UML类图</title>
    <link href="https://starlooo.github.io/2021/06/02/SuiBi1/"/>
    <id>https://starlooo.github.io/2021/06/02/SuiBi1/</id>
    <published>2021-06-01T16:00:00.000Z</published>
    <updated>2021-07-06T12:27:52.596Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;软件构造课程随笔–UML类图&quot;&gt;&lt;a href=&quot;#软件构造课程随笔–UML类图&quot; class=&quot;headerlink&quot; title=&quot;软件构造课程随笔–UML类图&quot;&gt;&lt;/a&gt;&lt;center&gt;软件构造课程随笔–UML类图&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;一-写在前面&quot;&gt;&lt;a href=&quot;#一-写在前面&quot; class=&quot;headerlink&quot; title=&quot;一. 写在前面&quot;&gt;&lt;/a&gt;一. 写在前面&lt;/h2&gt;&lt;div style=&quot;font-size: 0&quot;&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&amp;emsp;&amp;emsp;在软件构造课程中，我们讲三维度，八视图。其中build-time，code-level，moment view中就包含了Class Diagram，也就是类图。&lt;br&gt;
&amp;emsp;&amp;emsp;UML类图是一种常见的绘制JAVA类图的工具，&lt;mark&gt;能够看懂类图对于理解大型的JAVA程序的结构，以及理解各种各样的设计模式的思路都非常重要。&lt;/mark&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
首先简要介绍一下UML是什么：根据&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&lt;a href=&quot;https://baike.baidu.com/item/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80/3160571?fromtitle=UML&amp;fromid=446747&amp;fr=aladdin&quot;&gt;
百度百科UML词条&lt;/a&gt;的有关内容，统一建模语言(Unified Modeling Language，UML)是一种为面向对象系统的产品进行说明、&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
可视化和编制文档的一种标准语言，是非专利的第三代建模和规约语言。UML是面向对象设计的建模工具，独立于任何具体程序设计语言。&lt;br&gt;
&amp;emsp;&amp;emsp;UML的概念包括了UML语义（Semantics）和UML表示符（Notation）两个部分。UML语义定义了静态模型和动态模型。&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
结构模型强调系统的对象结构，入对象的类、接口、属性和关系；行为模型关注的是系统对象的行为动作，如对象的方法、交互、协作和状态。&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
UML表示符为开发者或开发工具使用这些图形符号和文本语法为系统建模提供了标准。重要内容由9种图来定义，包括用例图、类图、对象图、状态图、
&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
构件图、部署图、协作图、交互序列图、活动图。&lt;br&gt;
&amp;emsp;&amp;emsp;以上是对UML的简要介绍，还是比较抽象的，由于目前阶段我们并不涉及到整个UML统一建模语言的详细介绍，而是只是专注于&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
介绍UML类图这一部分内容，因此无需对UML本身做出过多的了解，这部分内容超出了软件构造课程的范围，这里我们只是简单地引入一些。&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
值得注意的是，&lt;mark&gt;本文旨在介绍UML类图的要素，目的是教会读者如何理解一个UML类图，并不涉及UML类图的绘制&lt;/mark&gt;，关于如何绘制UML类图，&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
以及有关工具在最后部分，我会罗列一些参考博客，可以供想要进一步了解的读者自行学习。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="我的笔记" scheme="https://starlooo.github.io/categories/%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://starlooo.github.io/tags/Java/"/>
    
    <category term="软件构造" scheme="https://starlooo.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%9E%84%E9%80%A0/"/>
    
    <category term="随笔" scheme="https://starlooo.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Java集合类学习笔记第一章--迭代器</title>
    <link href="https://starlooo.github.io/2021/05/21/collection_1/"/>
    <id>https://starlooo.github.io/2021/05/21/collection_1/</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2021-05-21T07:18:59.586Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Java集合类学习笔记第一章–迭代器&quot;&gt;&lt;a href=&quot;#Java集合类学习笔记第一章–迭代器&quot; class=&quot;headerlink&quot; title=&quot;Java集合类学习笔记第一章–迭代器&quot;&gt;&lt;/a&gt;&lt;center&gt;Java集合类学习笔记第一章–迭代器&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;一-本章概述&quot;&gt;&lt;a href=&quot;#一-本章概述&quot; class=&quot;headerlink&quot; title=&quot;一. 本章概述&quot;&gt;&lt;/a&gt;一. 本章概述&lt;/h2&gt;&lt;div style=&quot;font-size: 0&quot;&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&amp;emsp;&amp;emsp;在本章中，主要介绍Java迭代器的有关内容。&lt;br&gt;
&amp;emsp;&amp;emsp;要讲集合，首先得讲清楚迭代器。在JDK中可以从接口声明中清楚的看到&lt;a href=&quot;https://doc
s.oracle.com/javase/8/docs/api/java/util/Collection.html&quot;&gt;Collection&lt;/a&gt;接口继承自&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Iterable.html&quot;&gt;Iterable&lt;/a&gt;接口。&lt;br&gt;
&amp;emsp;&amp;emsp;而迭代器&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html&quot;&gt;
Iterator&lt;/a&gt;接口&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;,具体到其在各种集合类中对应的实现，为我们提供了有效地访问、遍历不同类型的集合中元素的方法。&lt;br&gt;
&amp;emsp;&amp;emsp;因此，我把对Iterable和Iterator这两个接口的学习放到了第一章。本章的学习目的为：&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
基本掌握Java迭代器在集合类当中的使用，同时对迭代器使用过程中的有关注意事项有一个清楚的认知。&lt;br&gt;&lt;/span&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="我的笔记" scheme="https://starlooo.github.io/categories/%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://starlooo.github.io/tags/Java/"/>
    
    <category term="学习笔记" scheme="https://starlooo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="迭代器" scheme="https://starlooo.github.io/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java集合类学习笔记序章</title>
    <link href="https://starlooo.github.io/2021/05/19/collection_0/"/>
    <id>https://starlooo.github.io/2021/05/19/collection_0/</id>
    <published>2021-05-18T16:00:00.000Z</published>
    <updated>2021-05-19T14:30:47.997Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Java集合类学习笔记序章&quot;&gt;&lt;a href=&quot;#Java集合类学习笔记序章&quot; class=&quot;headerlink&quot; title=&quot;Java集合类学习笔记序章&quot;&gt;&lt;/a&gt;&lt;center&gt;Java集合类学习笔记序章&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;一-系列简介&quot;&gt;&lt;a href=&quot;#一-系列简介&quot; class=&quot;headerlink&quot; title=&quot;一. 系列简介&quot;&gt;&lt;/a&gt;一. 系列简介&lt;/h2&gt;&lt;div style=&quot;font-size: 0&quot;&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&amp;emsp;&amp;emsp;在软件构造课程的学习过程中，对Java编程语言的不断&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
学习和练习是至关重要的。其中，通过对于Java JDK当中提供的各种各&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
样的容器的使用方法的学习能够极大地提高我们的编程能力。而JDK中&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
最常用的一类容器，莫过于&lt;a href=&quot;https://docs.oracle.com/javase
/8/docs/api/java/util/Collection.html&quot;&gt;集合Collection&lt;/a&gt;了。&lt;br&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&amp;emsp;&amp;emsp;因此，在学习Java Collection接口以及各个常见的实现类的过程当&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
中，撰写一系列博客来记录学习的过程和心得体会是有必要的。&lt;br&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&amp;emsp;&amp;emsp;然而，由于Java集合及其各种实现类源码本身涉及到复杂的Java语法，&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
比如多线程、注解等，以及其具体实现的精妙性、复杂性，&lt;mark&gt;很难保证该系列博客中记录的我个人的理解是正确无误的。&lt;/mark&gt;&lt;br&gt;&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
&amp;emsp;&amp;emsp;此外，受限于个人对Java的理解水平有限，以及时间精力等多重因素的&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
限制，所以&lt;mark&gt;一些细节的部分无法做到面面俱到，只是对一些学习到的知识随手记录&lt;/mark&gt;，&lt;/span&gt;
&lt;span style=&quot;font-size: 20px&quot;&gt;
系统性和逻辑性都略有不足。可做抛砖引玉之用。&lt;br&gt;&lt;/span&gt;
&lt;/div&gt;</summary>
    
    
    
    <category term="我的笔记" scheme="https://starlooo.github.io/categories/%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://starlooo.github.io/tags/Java/"/>
    
    <category term="学习笔记" scheme="https://starlooo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>markdown学习笔记</title>
    <link href="https://starlooo.github.io/2021/05/08/markdown/"/>
    <id>https://starlooo.github.io/2021/05/08/markdown/</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-05-10T01:04:35.653Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Markdown学习笔记&quot;&gt;&lt;a href=&quot;#Markdown学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Markdown学习笔记&quot;&gt;&lt;/a&gt;&lt;center&gt;Markdown学习笔记&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;一-markdown的简要介绍&quot;&gt;&lt;a href=&quot;#一-markdown的简要介绍&quot; class=&quot;headerlink&quot; title=&quot;一. markdown的简要介绍&quot;&gt;&lt;/a&gt;一. markdown的简要介绍&lt;/h2&gt;&lt;p&gt;
&amp;emsp;&amp;emsp;根据&lt;a href=&quot;http://markdown.p2hp.com/getting-started/&quot;&gt;
Markdown中文网 &lt;/a&gt;的描述：Markdown是一种轻量级的标记语言，
可用于将格式设置元素添加到纯文本文档中。 
Markdown由John Gruber于2004年创建，如今已成为世界上最受欢迎的标记语言之一。&lt;br&gt;  
&amp;emsp;&amp;emsp;本学期软件构造课和计算机系统课都有大量的实验任务, 
在完成实验后，写一写博客,留下一些记录，既能够帮助自己整理所学所感，
也能给后来者提供一些微不足道的教程和帮助。&lt;br&gt;
&amp;emsp;&amp;emsp;这是我第一次认真尝试写一篇博客，才疏学浅，希望能够起到抛砖引玉的作用。
此外，本文中由于hexo配置与markdown本身语法以及使用编辑器的种种桎梏，有些本应有效
的markdown语法在实际呈现到blog的时候出现了与预期不符的问题，&lt;mark&gt;所以为了解决这些
问题，我被迫使用了一些html语言&lt;/mark&gt;，但是实际上我并没有系统学习过markdown或者是html，
所以很有可能写的不规范或者不具有可扩展性和可移植性。&lt;br&gt;
&amp;emsp;&amp;emsp;同时为了排版方便以及演示代码的展现，大部分博客文字内容都呈现在代码块。&lt;br&gt;
&amp;emsp;&amp;emsp;下面正式进入正文部分：
&lt;/p&gt;</summary>
    
    
    
    <category term="我的笔记" scheme="https://starlooo.github.io/categories/%E6%88%91%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="学习笔记" scheme="https://starlooo.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="测试" scheme="https://starlooo.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
    <category term="markdown" scheme="https://starlooo.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://starlooo.github.io/2021/05/02/hello-world/"/>
    <id>https://starlooo.github.io/2021/05/02/hello-world/</id>
    <published>2021-05-02T12:15:10.682Z</published>
    <updated>2021-05-10T01:05:34.355Z</updated>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
